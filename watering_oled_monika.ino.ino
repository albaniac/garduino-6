/* @file CustomKeypad.pde
|| @version 1.0
|| @author Alexander Brevig
|| @contact alexanderbrevig@gmail.com
||
|| @description
|| | Demonstrates changing the keypad size and key values.
|| #
*/
#include <Keypad.h>

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
//define the cymbols on the buttons of the keypads
char hexaKeys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {9,8,7,6}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {5,4,3,2}; //connect to the column pinouts of the keypad

//initialize an instance of class NewKeypad
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 

// define the pin that control the relay
#define RELAY1  11  

//initializing the OLED display
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

//LOGO
#define CAMEO16_GLCD_HEIGHT 64
#define CAMEO16_GLCD_WIDTH 128 

static const unsigned char PROGMEM skull[] = {
  // 's, 128x64px
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf1, 0x13, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x8f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xec, 0x4d, 0xff, 0xff, 0xff, 0xff, 0xa2, 0x37, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xde, 0x12, 0x7f, 0xff, 0xff, 0xfe, 0x48, 0x7b, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xbc, 0x06, 0xbf, 0xff, 0xff, 0xfd, 0x60, 0x3d, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xbb, 0x47, 0x4f, 0xff, 0xff, 0xf2, 0xe2, 0xdd, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x76, 0xd1, 0xc7, 0xff, 0xff, 0xe3, 0x89, 0x6e, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xa5, 0xb8, 0xe9, 0xff, 0xff, 0x97, 0x1d, 0xa5, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x29, 0x7a, 0x38, 0xff, 0xff, 0x1c, 0x5e, 0x94, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x0a, 0xfc, 0x1c, 0xff, 0xff, 0x38, 0x3f, 0x50, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x80, 0x8f, 0x40, 0xff, 0xff, 0x02, 0xf1, 0x01, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0x08, 0x07, 0x8f, 0xff, 0xff, 0xf1, 0xe0, 0x10, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf4, 0x63, 0x07, 0x1f, 0xf0, 0x0f, 0xf8, 0xe0, 0xc6, 0x2f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x18, 0x02, 0x3f, 0x00, 0x00, 0xfc, 0x40, 0x18, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0xd1, 0x0c, 0x5c, 0x00, 0x00, 0x38, 0x30, 0x8b, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xee, 0x01, 0x54, 0x48, 0x00, 0x00, 0x02, 0x2a, 0x80, 0x77, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xea, 0x80, 0xa0, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x57, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x60, 0x28, 0x08, 0x20, 0x3c, 0x00, 0x14, 0x06, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0x10, 0x12, 0x00, 0x00, 0x00, 0x08, 0x00, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x50, 0x10, 0x03, 0x00, 0x0c, 0xc0, 0x08, 0x0a, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x0c, 0x06, 0x02, 0x00, 0x00, 0x50, 0x60, 0x30, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xca, 0x07, 0x00, 0x01, 0x00, 0x00, 0xe0, 0x53, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe5, 0x87, 0x50, 0x00, 0x40, 0x88, 0xe1, 0xa7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x4f, 0x30, 0x06, 0x61, 0x0c, 0xf2, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xaf, 0x11, 0x08, 0x32, 0x06, 0xf5, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x56, 0x10, 0x10, 0x18, 0x00, 0x6a, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x96, 0x03, 0xc0, 0x0f, 0xe0, 0x69, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0x00, 0x00, 0x00, 0x00, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x92, 0x03, 0x80, 0x40, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xc3, 0xff, 0xff, 0xd0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0x9f, 0xfd, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x8f, 0xef, 0xf3, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x08, 0x37, 0xee, 0x1a, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x18, 0x0f, 0xf0, 0x08, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x10, 0x02, 0x60, 0x09, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x9f, 0xf0, 0x10, 0x02, 0x40, 0x08, 0x0f, 0xf9, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x0f, 0x88, 0x18, 0x03, 0xc0, 0x08, 0x11, 0xf0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x10, 0x68, 0x18, 0x06, 0x60, 0x18, 0x16, 0x08, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfb, 0xef, 0x98, 0x0f, 0x2e, 0x34, 0x74, 0x19, 0xf7, 0x5f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x4b, 0x1c, 0x3f, 0xf8, 0x1f, 0xfc, 0x38, 0xd2, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe7, 0x80, 0x9a, 0x1f, 0xf8, 0x3f, 0xfc, 0x59, 0x01, 0xe7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0xbe, 0x44, 0xd7, 0xfc, 0x3f, 0xfb, 0x22, 0x7d, 0xc7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf3, 0x7f, 0x09, 0xe8, 0x78, 0xbe, 0x17, 0x90, 0xfe, 0xcf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0x7f, 0x2b, 0xf0, 0x0f, 0xf0, 0x0f, 0xd4, 0xfe, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfa, 0xff, 0x37, 0xf8, 0xbf, 0xfc, 0x1f, 0xec, 0xff, 0x5f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfa, 0xff, 0x2f, 0xfb, 0xbf, 0xfd, 0x9f, 0xf4, 0xff, 0x5f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0x7f, 0x2f, 0xfd, 0x85, 0xb1, 0xdf, 0xf4, 0xfe, 0x9f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x7f, 0x2f, 0xfd, 0xa8, 0x1d, 0xbf, 0xf4, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0xbc, 0x2f, 0xfd, 0x99, 0xb5, 0xbf, 0xf5, 0x3d, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x42, 0xc7, 0xfd, 0x81, 0x81, 0xbf, 0xe3, 0x42, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x23, 0xd7, 0xfd, 0x80, 0x01, 0xbf, 0xeb, 0xc0, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x9e, 0x8f, 0xfd, 0xc0, 0x01, 0xbf, 0xf1, 0x71, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xbf, 0xfd, 0x80, 0x01, 0xbf, 0xfd, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xfe, 0x00, 0x3d, 0xbf, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xfe, 0x45, 0xb2, 0x7f, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x0e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb3, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
 
static const unsigned char PROGMEM ganesh[] =
{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe2, 0x00, 0x00, 0x31, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0x40, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0x40, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0x40, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x10, 0x06, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x18, 0x06, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x18, 0x0c, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x00, 0x00, 0x01, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x00, 0x00, 0x01, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x30, 0x00, 0x00, 0x01, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x30, 0x00, 0x04, 0x03, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x30, 0x00, 0x06, 0x07, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x38, 0x40, 0x03, 0x06, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x18, 0x70, 0x01, 0xfc, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1c, 0x7c, 0x00, 0xf8, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xde, 0x00, 0x61, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0x8f, 0x80, 0x3f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x0d, 0xe0, 0x3e, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0c, 0x30, 0x10, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x18, 0x18, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x80, 0x00, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x80, 0x00, 0x7c, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xc0, 0x00, 0xc0, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xc0, 0x01, 0x80, 0x0e, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xfd, 0x81, 0x80, 0x1c, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x01, 0x00, 0x1c, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x01, 0x80, 0x1c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x01, 0x80, 0x3c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x01, 0xc0, 0x74, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x00, 0xe0, 0xe2, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xf0, 0x01, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xf8, 0x03, 0x9f, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x1e, 0x07, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xd8, 0x0f, 0xfe, 0x00, 0x1e, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xf9, 0x80, 0xf3, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0x01, 0x81, 0x80, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x03, 0x00, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xc0, 0x0c, 0x00, 0x4f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0x18, 0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x30, 0x60, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x30, 0x40, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x60, 0x40, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x60, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x61, 0x98, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x41, 0x18, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc0, 0x88, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x8d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };


   

//Initializig DS3231 clock
#include "Wire.h"
#define DS3231_I2C_ADDRESS 0x68
// Convert normal decimal numbers to binary coded decimal
byte decToBcd(byte val)
{
  return( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
byte bcdToDec(byte val)
{
  return( (val/16*10) + (val%16) );
}

void setup(){
 //INITIALIZE OLED SCREEN
  Serial.begin(9600);
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  display.display(); 
  delay(2000); 
  display.clearDisplay();
 
  //INITIALIZE RELAY 
  pinMode(RELAY1, OUTPUT); 
  digitalWrite(RELAY1,1);

  //INITIALIZE CLOCK
  // set the initial time here:
  //DS3231 seconds, minutes, hours, day, date, month, year
  //setDS3231time(00,00,17,2,28,05,18);
}

int h;
int m;
int wat_time = 17;
int dur = 5;

void loop(){
  char k = customKeypad.getKey();

  
//IF for changing watering time
if( k == 'A' ){
    Serial.println(k);
    
    for (int i=1; i <=2 ; i++){
      
      if(i==1){
        char n = customKeypad.waitForKey();
        h = n - '0';
        Serial.println(h);
        }
      if(i==2){
        char d = customKeypad.waitForKey();
        m = d-'0';
        Serial.println(m);
        } 
       wat_time = h*10+m;
    Serial.println(wat_time);    
    }
    wat_time = h*10+m;
    Serial.println(wat_time);  
  }

  
// if for changing watering duration
if( k == 'B' ){
    Serial.println(k);
    for (int i=1; i <=1 ; i++){
      char d = customKeypad.waitForKey();
      dur = d-'0';
      Serial.println(dur);
        } 
      }      
  
int h1;
int h2;
int m1;
int m2;
int d1;
int d2;
int mo1;
int mo2;
int y1;
int y2; 
if( k == 'C' ){
    Serial.println(k);
    byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;   
    readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month,
    &year);
    for (int i=1; i <=10 ; i++){
      
      if(i==1){
        char f = customKeypad.waitForKey();
        h1 = f - '0';
        Serial.println(h);
        }
      if(i==2){
        char f = customKeypad.waitForKey();
        h2 = f-'0';
        Serial.println(m);
        }
      if(i==3){
        char f = customKeypad.waitForKey();
        m1 = f-'0';
        Serial.println(m);
        } 
      if(i==4){
        char f = customKeypad.waitForKey();
        m2 = f-'0';
        Serial.println(m);
        }
        if(i==5){
        char f = customKeypad.waitForKey();
        d1 = f-'0';
        Serial.println(m);
        }
        if(i==6){
        char f = customKeypad.waitForKey();
        d2 = f-'0';
        Serial.println(m);
        }
        if(i==8){
        char f = customKeypad.waitForKey();
        mo1 = f-'0';
        Serial.println(m);
        }
        if(i==9){
        char f = customKeypad.waitForKey();
        mo2 = f-'0';
        Serial.println(m);
        }
        if(i==10){
        char f = customKeypad.waitForKey();
        y1 = f-'0';
        Serial.println(m);
        }
        if(i==10){
        char f = customKeypad.waitForKey();
        y2 = f-'0';
        Serial.println(m);
        }
       
   
    }
    hour = h1*10+h2;
    minute = m1*10+m2;
    dayOfMonth = d1*10+d2;
    month = mo1*10+mo2;
    year = y1*10+y2;
    //DS3231 seconds, minutes, hours, day, date, month, year
    setDS3231time(00,minute,hour,0,dayOfMonth,month,year);
  }

if( k == 'D' ){
  Serial.println(k);
  display.clearDisplay();
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.print("Ciao");
  display.setCursor(0,35);
  display.print("Monika!");
  display.display();
  delay(2000);
      }
if( k == '#' ){
  Serial.println(k);
  display.clearDisplay();
  // below first two number equals stating pixel point,the three numbers next to logoname represent width, height and rotation
  display.drawBitmap(0, 0,  ganesh, 128, 64, 1);
  display.display();
  delay(2000);
      } 
if( k == '*' ){
  Serial.println(k);
  display.clearDisplay();
  // below first two number equals stating pixel point,the three numbers next to logoname represent width, height and rotation
  display.drawBitmap(0, 0,  skull, 128, 64, 1);
  display.display();
  water_plants(dur);  
      } 
  
  
  displayTime(wat_time, dur); 
  byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;   
  readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month,
  &year);
  //Serial.println(second);
  if( hour == wat_time and minute == 0 and second == 3 ){
    water_plants(dur);
    delay(1000);
  }
  delay(100);
  //water_plants(dur);
}


// define watering function that waters for "dur" seconds
// how long to water is set by variable "dur", default is 8 seconds
void water_plants(int dur){
   digitalWrite(RELAY1,0);          // Turns ON Relays 1
   Serial.println(dur);
   delay(dur*1000);                     // Wait 2 seconds

   digitalWrite(RELAY1,1);          // Turns Relay Off
   delay(100);
}

//Functions for the clock
void setDS3231time(byte second, byte minute, byte hour, byte dayOfWeek, byte
dayOfMonth, byte month, byte year)
{
  // sets time and date data to DS3231
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0); // set next input to start at the seconds register
  Wire.write(decToBcd(second)); // set seconds
  Wire.write(decToBcd(minute)); // set minutes
  Wire.write(decToBcd(hour)); // set hours
  Wire.write(decToBcd(dayOfWeek)); // set day of week (1=Sunday, 7=Saturday)
  Wire.write(decToBcd(dayOfMonth)); // set date (1 to 31)
  Wire.write(decToBcd(month)); // set month
  Wire.write(decToBcd(year)); // set year (0 to 99)
  Wire.endTransmission();
}
void readDS3231time(byte *second,
byte *minute,
byte *hour,
byte *dayOfWeek,
byte *dayOfMonth,
byte *month,
byte *year)
{
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0); // set DS3231 register pointer to 00h
  Wire.endTransmission();
  Wire.requestFrom(DS3231_I2C_ADDRESS, 7);
  // request seven bytes of data from DS3231 starting from register 00h
  *second = bcdToDec(Wire.read() & 0x7f);
  *minute = bcdToDec(Wire.read());
  *hour = bcdToDec(Wire.read() & 0x3f);
  *dayOfWeek = bcdToDec(Wire.read());
  *dayOfMonth = bcdToDec(Wire.read());
  *month = bcdToDec(Wire.read());
  *year = bcdToDec(Wire.read());
}

void displayTime(int wat_time, int dur)
{
  byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;
  // retrieve data from DS3231
  readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month,
  &year);

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,40);
  display.print("Watering at "+ String(wat_time) + "h for " + String(dur)+ " seconds");
  display.setTextSize(2);
  display.setCursor(0,00);
  display.print(hour, DEC);
  // convert the byte variable to a decimal number when displayed
  display.print(":");
  if (minute<10)
  {
    display.print("0");
  }
  display.print(minute, DEC);
  display.print(" ");
  switch(dayOfWeek){
  case 1:
    display.print("Sun");
    break;
  case 2:
    display.print("Mon");
    break;
  case 3:
    display.print("Tue");
    break;
  case 4:
    display.print("Wed");
    break;
  case 5:
    display.print("Thu");
    break;
  case 6:
    display.print("Fr");
    break;
  case 7:
    display.print("Sat");
    break;
  }
  display.setCursor(0,20);
  display.print(dayOfMonth, DEC);
  display.print("/");
  display.print(month, DEC);
  display.print("/");
  display.print(year, DEC);
  display.display();

  
  
}

